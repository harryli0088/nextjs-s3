import Head from "next/head";
import { useMutation, useQuery } from "@tanstack/react-query";
import Image from "next/image";

const getImages = async (): Promise<string[]> => {
  const response = await fetch("/api/files");

  if (!response.ok) {
    const data = await response.json()
    throw new Error(`${data.error}`);
  }

  return await response.json();
};

const uploadImage = async (file: File): Promise<any> => {
  const formData = new FormData();
  formData.append("image", file);
  formData.append("test","123")
  formData.set("hahaha","456")

  const response = await fetch("/api/upload", {
    method: "POST",
    body: formData,
    headers: {
      // No need to set Content-Type for FormData; the browser does it automatically
    },
  });

  if (!response.ok) {
    const data = await response.json()
    throw new Error(`${data.error}`);
  }

  return response.json();
};

export default function Home() {
  const query = useQuery({
    queryKey: [""],
    queryFn: getImages,
  })

  const mutation = useMutation({
    mutationFn: uploadImage,
    onSuccess() {
      query.refetch()
    }
  });

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files?.length) {
      mutation.mutate(event.target.files[0]);
    }
  };

  return (
    <>
      <Head>
        <title>NextJS + S3 Test Application</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{padding:"2rem"}}>
        <h1>NextJS + S3 Test Application</h1>
        <br/>
        <section>
          <h2>Upload Images</h2>
          <br/>
          <br/>
          <label htmlFor="upload-image" style={{
            padding: "1rem",
            paddingTop: "0.5rem",
            paddingBottom: "0.5rem",
            backgroundColor: "white",
            borderRadius: 5,
            cursor: "pointer",
            color: "black",
          }}>Upload Image</label>
          <input id="upload-image" type="file" accept="image/png,image/jpeg" onChange={handleFileChange} style={{display:"none"}}/>
          <br/>
          <br/>
          <br/>
          {mutation.isPending && <p>Uploading...</p>}
          {mutation.error && <p>{`${mutation.error}`}</p>}
          {mutation.isSuccess && <p>Upload successful!</p>}
        </section>

        <br/>
        <hr/>
        <br/>

        <section>
          <h2>Current Images</h2>
          <br/>
          {query.data && query.data.map((f,i) => {
            return (
              <Image src={`/api/image/${f}`} alt={f} width={300} height={300}/>
            )
          })}
          {query.isLoading && <p>Loading...</p>}
          {query.error && <p>{`${query.error}`}</p>}
        </section>
      </div>
    </>
  );
}
